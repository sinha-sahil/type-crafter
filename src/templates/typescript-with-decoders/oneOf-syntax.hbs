export type {{typeName}} =
  {{#each compositions}}
  | {{#if (eq this.source 'referenced')}}C{{../typeName}}{{referencedType}}
  {{else if (eq this.source 'inline')}}
    {{#if this.templateInput.values}}
      {{this.templateInput.typeName}}
    {{else if (eq this.dataType 'object')}}
      C{{typeName}}{{this.templateInput.typeName}}
    {{else}}
      {{this.templateInput.type}}
    {{/if}}
  {{/if}}
{{/each}};

export function decode{{typeName}}(rawInput: unknown): {{typeName}} | null {
  const result: {{typeName}} | null =
  {{#each compositions}}
  {{#if (eq this.source 'referenced')}}
    decodeC{{../typeName}}{{referencedType}}(rawInput)
  {{else if (eq this.dataType 'object')}}
    decodeC{{this.templateInput.typeName}}(rawInput)
  {{else if (eq this.dataType 'array')}}
    decodeArray(rawInput, decode{{{toPascalCase this.templateInput.composerType}}})
  {{else if this.templateInput.values}}
    decode{{this.templateInput.typeName}}(rawInput)
  {{else}}
    decode{{{toPascalCase this.templateInput.type}}}(rawInput)
  {{/if}}{{#unless @last}}??{{/unless}}
  {{/each}};
  return result;
}


{{#each compositions}}

{{#if this.templateInput.values}}
{{{this.content}}}
{{else if (eq this.source 'referenced')}}
export class C{{../typeName}}{{referencedType}} {
  data: {{referencedType}};
  constructor(data: {{referencedType}}) {
    this.data = data;
  }
}

export function decodeC{{../typeName}}{{referencedType}}(rawInput: unknown): C{{../typeName}}{{referencedType}} | null {
  const result = decode{{referencedType}}(rawInput);
  if (result === null) {
    return null;
  }
  return new C{{../typeName}}{{referencedType}}(result);
}

{{else if (eq this.dataType 'object')}}

{{{this.content}}}

export class C{{../typeName}}{{this.templateInput.typeName}} {
  data: {{this.templateInput.typeName}};
  constructor(data: {{this.templateInput.typeName}}) {
    this.data = data;
  }
}

export function decodeC{{this.templateInput.typeName}}(rawInput: unknown) {
  const result = decode{{this.templateInput.typeName}}(rawInput);
  if (result === null) {
    return null;
  }
  return new C{{../typeName}}{{this.templateInput.typeName}}(result);
}

{{/if}}
{{/each}}
