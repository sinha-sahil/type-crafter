/**
 * @type { {{typeName}} }
 {{#if description}}
 * @description {{{description}}}
 {{/if}}
 {{#if example}}
 * @example {{{example}}}
 {{/if}}
 */
export type {{typeName}} = {
  {{#each properties}}
  /**
  {{#if this.description}}
   * @description {{{this.description}}}
  {{/if}}
   * @type { {{this.type}} }
   * @memberof {{../typeName}}
  {{#if this.example}}
   * @example {{{this.example}}}
  {{/if}}
   */
  {{{jsonKey @key}}}: {{{this.type}}}{{#unless this.required}} | null{{/unless}};
  {{/each}}
  {{#if additionalProperties}}
  [keys: {{jsonKey additionalProperties.keyType}}]: {{additionalProperties.valueType}};
  {{/if}}
};

export function decode{{typeName}}(rawInput: unknown): {{typeName}} | null {
  if (isJSON(rawInput)) {
    {{#each properties}}
    const decoded{{variableName @key}} = {{#if (eq this.primitiveType 'array') }} decodeArray(rawInput[{{{indexKey @key}}}], decode{{{toPascalCase this.composerType}}}){{else}} decode{{{toPascalCase this.type}}}(rawInput[{{{indexKey @key}}}]){{/if}};
    {{/each}}

    {{#if (areRequiredKeysPresent properties)}}
    if (
      {{#each (getRequiredKeys properties)}}
      decoded{{toPascalCase this}} === null{{#unless @last}} ||{{/unless}}
      {{/each}}
    ) {
      return null;
    }
    {{/if}}

    return {
      {{#if additionalProperties}}
      ...rawInput,
      {{/if}}
      {{#each properties}}
      {{{jsonKey @key}}}: decoded{{{variableName @key}}},
      {{/each}}
    };
  }
  return null;
}
